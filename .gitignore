#import packages
import numpy as np
from sys import exit

#input size of trip distribution matrix
nodes = int(input('Enter the number of rows/columns in the trip distribution matrix:'))
if nodes < 0:
    exit()
#input all numbers in the trip distribution matrix
matrix = list(float(num) for num in input("Enter all numbers from top to bottom of trip distribution matrix by rows: \n").strip().split())[:]
#check if size of trip distribution matrix is valid
if len(matrix) != nodes**2:
    exit()
#split trip distribution matrix into rows
row = [matrix[i:i+nodes] for i in range(0,len(matrix),nodes)]
#calculate list of base Oi
baseOi = [sum(row[i]) for i in range(0,len(row))]

#rearrange trip distribution matrix into columns
column = np.array(row).transpose()

#calculate list of base Dj
baseDj = [sum(column[i]) for i in range(0,len(column))]

#input future Oi and Dj
futureOi = list(float(num) for num in input("Enter future trip Ps/Oi:").strip().split())[:nodes]
futureDj = list(float(num) for num in input("Enter future trip As/Dj:").strip().split())[:nodes]

#check if input future Oi and Dj are valid
if len(futureOi) != nodes or len(futureDj) != nodes:
    exit()

#check convergence of present vs. forecast
convergence = False
if baseDj == futureDj and baseOi == futureOi:
    convergence == True
    exit()

#define lists and variables
updatedColumn = []
updatedOi = []
iteration = 0
#iterative calculations of Biproportional updating
while convergence == False:
    iteration = iteration + 1
    iA = []
    iB = []
    check = []
    #using given values in first iteration
    if iteration == 1:
        for i in range(0,nodes):
            for j in row[i]:
                #biproportional equation
                iAcalc = j*futureOi[i]/baseOi[i]
                #add result to new list
                iA.append(iAcalc)
    #using previously computed parameters for the rest of iterations
    else:
        for i in range(0,nodes):
            for j in updatedColumn[i]:
                iAcalc = j*futureOi[i]/updatedOi[i]
                iA.append(iAcalc)
    #update Oi
    updatedRow = [iA[i:i+nodes] for i in range(0,len(iA),nodes)]
    updatedOi = [sum(updatedRow[i]) for i in range(0,len(updatedRow))]
    #Update Dj
    updatedColumn = np.array(updatedRow).transpose()
    #print updated trip distribution matrix
    print("\n Trip distribution matrix for Iteration",iteration,"A is: \n",np.array(updatedRow))
    updatedDj = [sum(updatedColumn[i]) for i in range(0,len(updatedColumn))]
    #print updated Oi
    print("\n Updated O*i for Iteration",iteration,"A is: \n",updatedOi)
    #print updated Dj
    print("\n Updated D*j for Iteration",iteration,"A is: \n",updatedDj)
    #print error
    for i in range(0,nodes):
        print("Row Error                        Column Error")
        print(abs(updatedOi[i]-futureOi[i]),abs(updatedDj[i]-futureDj[i]))
    #Part B iterations
    for i in range(0,nodes):
        for j in updatedColumn[i]:
            iBcalc = j*futureDj[i]/updatedDj[i]
            iB.append(iBcalc)
    updatedRow = [iB[i:i+nodes] for i in range(0,len(iB),nodes)]
    #update Dj
    updatedDj = [sum(updatedRow[i]) for i in range(0,len(updatedRow))]
    updatedColumn = np.array(updatedRow).transpose()
    #print updated trip distribution matrix
    print("\n Trip distribution matrix for Iteration",iteration,"B is \n",updatedColumn)
    #update Oi
    updatedOi = [sum(updatedColumn[i]) for i in range(0,len(updatedColumn))]
    #print updated Oi
    print("\n Updated O*i for Iteration",iteration,"B is: \n",updatedOi)
    #print updated Dj
    print("\n Updated D*j for Iteration",iteration,"B is: \n",updatedDj)
    #print error
    for i in range(0,nodes):
        print("Row Error                        Column Error")
        print(abs(updatedOi[i]-futureOi[i]),abs(updatedDj[i]-futureDj[i]))
    #check convergence, comment out if number of iteration is given
    for i in range(0,nodes):
        #check if future and iterated Oi and Dj converge to an acceptable error
        if abs(updatedDj[i] - futureDj[i]) < 0.0000001 and abs(updatedOi[i] - futureOi[i]) < 0.0000001:
            check.append("True")
        else:
            check.append("False")
            break
    for i in range(0,len(check)):
        if len(check) == nodes and check[i] != False:
            convergence = True
    #stop when a number of iterations is given, comment out if not given
    if iteration == 10:
        convergence = True
